# -*- shell-script -*-

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
    *) return;;
esac

# Include local environment variables.
if [ -e "${HOME}/.env" ]; then
    . "${HOME}/.env"
fi

_DOTFILES_BASH_ROOT=
if [ -z "$MSYSTEM" ]; then
    _DOTFILES_BASH_ROOT="$(cd "$(dirname "$(readlink -f "${BASH_SOURCE:-$0}")")"; pwd)"
else
    if [ ! -e "$HOME/.dotfiles_root" ]; then
        echo 'Warning: Your system seems to be MSYS2, but ~/.dotfiles_root does not exists.'
        echo '         Initialization will fail and I recommend you to reinstall dotfiles'
        echo '         using Makefile.'

        # Set it to harmless one.
        # I want to avoid empty _DOTFILES_BASH_ROOT to lead generating rooted path
        # (e.g. "$_DOTFILES_BASH_ROOT/foobar" => "/foobar").
        _DOTFILES_BASH_ROOT='/tmp/INVALID'
    else
        _DOTFILES_BASH_ROOT="$(cat "$HOME/.dotfiles_root")/bash"
    fi
fi

function __load_files() {
    local f
    local load_files=(
        'bash_options.bash'
        'prompt.bash'
        'aliases.bash'
        'envvars.bash'
        'utilities.bash'
        'overrides.bash'
    )

    if [ ! -z "${MSYSTEM}" ]; then
        # load MSYS-specific configuration file
        load_files=(
            'msys2.bash'
            "${load_files[@]}"
        )
    fi

    for f in "${load_files[@]}"; do
        source "$_DOTFILES_BASH_ROOT/$f"
    done
} && __load_files; unset __load_files

unset _DOTFILES_BASH_ROOT

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [ -f "${HOME}/.local/share/bash-completion/bash_completion" ]; then
        . "${HOME}/.local/share/bash-completion/bash_completion"
    elif [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    fi
fi
